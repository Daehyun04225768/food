from flask import Flask, request, jsonify
from openai import OpenAI
import httpx # httpx 라이브러리 임포트
from dotenv import load_dotenv
import os

app = Flask(__name__)

# 환경 변수 로드
load_dotenv('api.env')  # api.env 파일에서 환경변수 로드
api_key = os.getenv('OPENAI_API_KEY')

# OpenAI API 클라이언트 설정
client = OpenAI(
    api_key=api_key,
    http_client=httpx.Client()
)

@app.route('/api/generate_recipe', methods=['POST'])
def generate_recipe():
    data = request.get_json()
    ingredients = data.get('ingredients')

    if not ingredients:
        return jsonify({'error': '재료를 입력해주세요.'}), 400

    try:
        # GPT API 호출
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": f"다음 재료들로 만들 수 있는 요리 레시피를 알려줘: {ingredients}",
                }
            ],
            model="gpt-4o-mini",  # 모델을 gpt-4o-mini로 변경
        )
        gpt_response = chat_completion.choices[0].message.content
        return jsonify({'recipe': gpt_response})
    except Exception as e:
        print(e) # 실제 예외 메시지를 서버 로그에 출력
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
